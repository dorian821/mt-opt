
#data must be filtered to contain only trades that were entered
#data['Exit_Percentage'] = actual exit percentage (over d2op) not to be confused with Calc_Exit_Percentage
exit_col = date of exit
credit_col_name = e.g. 'Calc_Target_Exit_PnL'
def event_logger(data,market_dates,exit_col,credit_col_name): #rowwise dataframe for each acct change
#data_index = data['Trade_Date']
#data.reset_index(,drop=False, inplace=True)
entries_date: pd.Series((lambda x: market_dates.ix[market_dates.loc[x].getloc() + 1] for x in data['Trade_Date']),index=data.index,name='Entry_Date')
debits = pd.Series(acct*(data['D2Op']*data['Buy_Target_Percentage']),index=data.index,name='Debits')
exits_calc_date: pd.Series(((lambda x: market_dates.ix[market_dates.loc[data.ix[x]['Trade_Date']].getloc() + data.ix[x]['Calc_Exit_Day']]) for x in data.index),index=data.index,name='Calc_Exit_Date')
credits: pd.Series(((acct*(data['Exit_Percentage']-data[Buy_Target_Percentage']+1)),index=data.index,name='Calc_Target_Exit_PnL')




exits_calc_value: pd.Series(((acct*1.2  for x in data[data[Exit_20%_Percentage),index=data.index,name='20%_Exit_PnL')
exits_calc_value: pd.Series(((acct*(data['Exit_Percentage']-data[Buy_Target_Percentage'])),index=data.index,name='50%_Exit_PnL')
exits_calc_value: pd.Series(((acct*(data['Exit_Percentage']-data[Buy_Target_Percentage'])),index=data.index,name='75%_Exit_PnL')
exits_calc_value: pd.Series(((acct*(data['Exit_Percentage']-data[Buy_Target_Percentage'])),index=data.index,name='100%_Exit_PnL')


