
"EXIT STRATEGY 1"   MEANS EXIT AT CALCULATED PERCENTILE D7-D10 OR OTHER DEFINED EXIT TIME FRAME;  IF THE EXIT PERCENTILE/PERCENTAGE IS NOT ACHIEVED THEN EXIT AT CLOSE D10.
"EXIT STRATEGY 2"  MEANS LOOK FOR EXIT POINT D7-10 OR OTHER DEFINED EXIT TIME FRAME WHERE THE LOSS IS NO MORE THAN 5%
"EXIT STRATEGY 3" MEANS THAT IF THE CALC SELL IS NOT ACHIEVED DURING THE DEFINED WIN TIME, THEN THE POSITION IS CLOSED AT CLOSE ON D6 OR OTHER DEFINED WIN TIME.
"EXIT STRATEGY 4" Means that if win is not reached by day 10, then position is held 'til day 20/expiration




		




					

	########################################################################################################################################
		

	def trade_analyzer(data,sellpc,buypc,exstr,exitpc,mmgmt,strategyformula,acct):
		trpl = ''.join([strategyformula,'_Trade_Profit/Loss'])
		profit = 1 + (sellpc-buypc)
		entries = pd.Series(data=(data['D2Lo/D2op'] <= buypc),index=data.index,name=''.join([strategyformula,'_Got_In?']))
		if exstr == 'EX4':
			wins = pd.Series(data=((data['Trade_Hi'] >= sellpc) & (entries == True)),index=data.index,name=''.join([strategyformula,'_Wins?']))
		else:
			wins = pd.Series(data=((data['per1hi_percent'] >= sellpc) & (entries == True)),index=data.index,name=''.join([strategyformula,'_Wins?']))
		
		if exstr == 'EX1':
			successfulexits = pd.Series(data=((wins == False) & (entries == True) & (data['per2hi_percent'] >= exitpc)),index=data.index,name=''.join([strategyformula,'_Successful_Exits']))
		elif exstr == 'EX2':
			successfulexits = pd.Series(data=(wins == False) & (entries == True) & (data['per2hi_percent'] >= (data['d2op']*.95)),index=data.index,name=''.join([strategyformula,'_Successful_Exits']))
		elif exstr == 'EX3' or exstr == 'EX4':
			successfulexits = pd.Series(data=False,index=data.index,name=''.join([strategyformula,'_Successful_Exits']))
		if exstr == 'EX3':
			escape = pd.Series(data=np.where(((wins == False) & (entries == True) & (successfulexits == False)),exstr, np.nan),index=data.index,name=''.join([strategyformula,'_Escapes?']))
		elif exstr == 'EX1':
			escape = pd.Series(data=(np.where((wins == False) & (entries == True) & (successfulexits == False),exstr, np.nan)),index=data.index,name=''.join([strategyformula,'_Escapes?']))
		elif exstr == 'EX2':
			escape = pd.Series(data=(np.where((wins == False) & (entries == True) & (successfulexits == False),exstr, np.nan)),index=data.index,name=''.join([strategyformula,'_Escapes?']))
		elif exstr == 'EX4':
			escape = pd.Series(data=(np.where((wins == False) & (entries == True) & (successfulexits == False),exstr, np.nan)),index=data.index,name=''.join([strategyformula,'_Escapes?']))
		tradepl = pd.Series(data=(np.where(wins == True,(acct * profit)-acct,
									np.where(successfulexits == True,(acct * exitpc) - acct,
									np.where(escape == 'EX3',((acct * data['per1cl_percent'])-acct),
									np.where(((escape == 'EX2') & (successfulexits == False)),((acct * (data['per2cl_percent']-buypc)-acct),
									np.where(((escape == 'EX1') & (successfulexits == False)),((acct * (data['per2cl_percent']-buypc)-acct),
									np.where((escape == 'EX4'),((acct * data['per3cl_percent'])-acct),np.nan))))))),index=data.index,name=trpl)
		ev = ''.join([strategyformula,'_Evaluation'])
		eval = pd.Series(data=(np.where(((wins == False) | ((wins == True) & (tradepl == ((acct * profit)-acct)))),True,False)),index=data.index, name =''.join([strategyformula,'_Win_Calc_Evaluation'])) #Discuss this calc with Dad

		datah = pd.concat([entries,wins,successfulexits,escape,tradepl,eval],axis=1)
		return datah

			
		
	def decoder(strategy):
	#"20/10.GLB,7-10.GLB,EX1,MGMT1"
		st = strategy.split(',',3)
		buysell = st[0].split('/',1)
		buyperc = buysell[0]
		buysell = buysell[1].split('.',1)
		sellperc = buysell[0]
		sellset = buysell[1]
		if len(st[1]) != 0:
			exit = st[1].split('.',1)
			exitperiod = exit[0]
			exitset = exit[1]
		else:
			exitperiod = np.nan
			exitset = np.nan		
		exitstrategy = st[2]
		mmgmt = st[3]	
		return buyperc,sellperc,sellset,exitperiod,exitset,exitstrategy,mmgmt
		
	def reporter(data,strategy,option,account):
		buyperc,sellperc,sellset,exitperiod,exitset,exstr,mmgmt = decoder(strategy)
		report = pd.DataFrame(index=np.arange(1),columns=criteria)
		strategyformula = ''.join([strategy,',',option.replace('.csv','')])
		report['Strategy_Formula'] = strategyformula
		report['#_in_Dataset'] = len(data)
		buypc = data['D2Lo/D2op'].quantile(q=int(buyperc)/100)
		report['Buy_Target_%'] = buypc
		acct = account * .5
		semiset = data[data['D2Lo/D2op'] <= buypc] #Semi-Restricted Data Set
		if exstr == 'EX4':
			if sellset == 'SEMI':
				sellpc = semiset['Trade_Hi'].quantile(q=int(sellperc)/100)
				report['Win_Period_10th'] = semiset['Trade_Hi'].quantile(q=.1)
				report['Win_Period_20th'] = semiset['Trade_Hi'].quantile(q=.2)
				report['Win_Period_40th'] = semiset['Trade_Hi'].quantile(q=.4)
				report['Win_Period_50th'] = semiset['Trade_Hi'].quantile(q=.5)
				report['Win_Period_60th'] = semiset['Trade_Hi'].quantile(q=.6)
			else: 
				sellpc = data['Trade_Hi'].quantile(q=int(sellperc)/100)
				report['Win_Period_10th'] = data['Trade_Hi'].quantile(q=.1)
				report['Win_Period_20th'] = data['Trade_Hi'].quantile(q=.2)
				report['Win_Period_40th'] = data['Trade_Hi'].quantile(q=.4)
				report['Win_Period_50th'] = data['Trade_Hi'].quantile(q=.5)
				report['Win_Period_60th'] = data['Trade_Hi'].quantile(q=.6)
		else: 
			if sellset == 'SEMI':
				sellpc = semiset['per1hi_percent'].quantile(q=int(sellperc)/100)
				report['Win_Period_10th'] = semiset['per1hi_percent'].quantile(q=.1)
				report['Win_Period_20th'] = semiset['per1hi_percent'].quantile(q=.2)
				report['Win_Period_40th'] = semiset['per1hi_percent'].quantile(q=.4)
				report['Win_Period_50th'] = semiset['per1hi_percent'].quantile(q=.5)
				report['Win_Period_60th'] = semiset['per1hi_percent'].quantile(q=.6)
			else: 
				sellpc = data['per1hi_percent'].quantile(q=int(sellperc)/100)
				report['Win_Period_10th'] = data['per1hi_percent'].quantile(q=.1)
				report['Win_Period_20th'] = data['per1hi_percent'].quantile(q=.2)
				report['Win_Period_40th'] = data['per1hi_percent'].quantile(q=.4)
				report['Win_Period_50th'] = data['per1hi_percent'].quantile(q=.5)
				report['Win_Period_60th'] = data['per1hi_percent'].quantile(q=.6)
			
		restset = semiset[semiset['per1hi_percent'] >= sellpc] #Restricted Data Set
		report['Sell_Target_%'] = sellpc
		#Exit Percentage Target Based On Exit Set Specification
		if exitset == 'GLB':
			exitpc = data['per2hi_percent'].quantile(q=.1)
		elif exitset == 'SEMI':
			exitpc = semiset['per2hi_percent'].quantile(q=.1)
		elif exitset == 'REST':
			exitpc = restset['per2hi_percent'].quantile(q=.1)
			
		#Generate Column Names
		wins = ''.join([strategyformula,'_Wins?'])
		trpl = ''.join([strategyformula,'_Trade_Profit/Loss'])
		ev = ''.join([strategyformula,'_Win_Calc_Evaluation'])
		biglosstx = ''.join([strategyformula,'_TXs_Loss>50%'])
		cumprofit = ''.join([strategyformula,'_Cumulative_Profit/Loss'])
		entries = ''.join([strategyformula,'_Got_In?'])
		successfulexits = ''.join([strategyformula,'_Successful_Exits'])
		report['Calc_Profit%'] = sellpc-buypc
		pft = 1 + (sellpc-buypc)
		datah = trade_analyzer(data,sellpc=sellpc,buypc=buypc,exstr=exstr,exitpc=exitpc,mmgmt=mmgmt,strategyformula=strategyformula,acct=acct)
		
		#Final Calcs
		report['D2_Investible_Volume'] = data.ix[-20:]['d2ivst'].mean()#test
		report['#_of_Transactions'] = np.sum(datah[entries])
		datah[biglosstx] = datah[trpl] <= (acct * -.5)
		report['#_OF_"FALSE"_IN_WIN_CALC'] = len(data) - np.sum(datah[ev]) #Investigate: Clarify the meaning of the Win Calc and its calculation
		report['%_of_TXs_w/_LOSS>50%'] = np.sum(datah[biglosstx])/len(semiset)
		datah[cumprofit] = datah[trpl].cumsum()
		report['Win%'] = np.sum(datah[wins])/np.sum(datah[entries])
		report['Fail%'] = 1-report['Win%']
		report['CALC._PROF/LOSS_ON_Fd_TXS'] = exitpc-buypc
		report['Highest_Hi'] = datah[cumprofit].max()
		report['Max_Drawdown'] = datah[cumprofit].min()
		report['Max_%_Drawdown'] = datah[cumprofit].min()/acct
		net = datah[datah[entries] == True]
		report['Net_Profit/Loss'] = net.ix[-1][cumprofit]
		report['Ratio_Net/Highest_Hi'] = report['Net_Profit/Loss']/report['Highest_Hi']
		report['Hist_Profit/Loss_per_Tx'] = (report['Net_Profit/Loss']/report['#_of_Transactions'])
		report['#_TX>0'] = np.sum(datah[trpl]>0)
		report['%_of_TX>0'] = np.sum(datah[trpl]>0)/len(semiset)
		report['Catastrophic_Fail_%_(-80%)'] = np.sum(datah[trpl]<=(acct*(-.8)))
		report['AMT_AT_RISK'] = acct
		report['#_of_Exit_Attempts'] = np.sum(datah[entries]) - np.sum(datah[wins])
		report['%_Successful_Exits'] = np.sum(datah[successfulexits])/(np.sum(datah[entries]) - np.sum(datah[wins]))
		
		
		if (mmgmt == 'MGMT1') & (report.ix[0]['#_of_Transactions'] > 9) & (report.ix[0]['Ratio_Net/Highest_Hi'] >= .9499) & (report.ix[0]['Hist_Profit/Loss_per_Tx'] >= acct * .099) & (report.ix[0]['#_OF_"FALSE"_IN_WIN_CALC'] < 2) &  (report.ix[0]['%_of_TXs_w/_LOSS>50%'] < .06) & (report.ix[0]['Win%'] >= .8) & (report.ix[0]['Catastrophic_Fail_%_(-80%)'] == 0):
			report['Level'] = 1
		else:
			report['Level'] = 0
		return report, datah
		
	criteria = ('Form_#','Level','Strategy_Formula','#_of_Transactions','#_in_Dataset','D2_Investible_Volume','Calc_Profit%','Win%','Net_Profit/Loss',
				'Highest_Hi','Ratio_Net/Highest_Hi','Hist_Profit/Loss_per_Tx','#_TX>0','%_of_TX>0', '#_OF_"FALSE"_IN_WIN_CALC',
				'Fail%','CALC._PROF/LOSS_ON_Fd_TXS','#_of_Exit_Attempts','%_Successful_Exits','Max_Drawdown','Max_%_Drawdown','%_of_TXs_w/_LOSS>50%',
				'Catastrophic_Fail_%_(-80%)','AMT_AT_RISK','Buy_Target_%','Sell_Target_%','Win_Period_10th','Win_Period_20th','Win_Period_40th','Win_Period_50th','Win_Period_60th')	

	strategies = ["20/10.GLB,7-10.GLB,EX1,MGMT1",
				"20/10.GLB,7-10.GLB,EX1,MGMT2",
				"20/10.GLB,7-10.GLB,EX2,MGMT1",
				"20/10.GLB,7-10.GLB,EX2,MGMT2",
				"20/10.GLB,7-10.GLB,EX3,MGMT1",
				"20/10.GLB,7-10.GLB,EX3,MGMT2",
				"20/10.GLB,7-10.SEMI,EX1,MGMT1",
				"20/10.GLB,7-10.SEMI,EX1,MGMT2",
				"20/10.GLB,7-10.REST,EX1,MGMT1",
				"20/10.GLB,7-10.REST,EX1,MGMT2",
				"20/10.SEMI,7-10.GLB,EX1,MGMT1",
				"20/10.SEMI,7-10.GLB,EX1,MGMT2",
				"20/10.SEMI,7-10.GLB,EX2,MGMT1",
				"20/10.SEMI,7-10.GLB,EX2,MGMT2",
				"20/10.SEMI,7-10.GLB,EX3,MGMT1",
				"20/10.SEMI,7-10.GLB,EX3,MGMT2",
				"20/10.SEMI,7-10.SEMI,EX1,MGMT1",
				"20/10.SEMI,7-10.SEMI,EX1,MGMT2",
				"20/10.SEMI,7-10.REST,EX1,MGMT1",
				"20/10.SEMI,7-10.REST,EX1,MGMT2",
				"20/5.GLB,7-10.GLB,EX1,MGMT1",
				"20/5.GLB,7-10.GLB,EX1,MGMT2",
				"20/5.GLB,7-10.GLB,EX2,MGMT1",
				"20/5.GLB,7-10.GLB,EX2,MGMT2",
				"20/5.GLB,7-10.GLB,EX3,MGMT1",
				"20/5.GLB,7-10.GLB,EX3,MGMT2",
				"20/5.GLB,7-10.SEMI,EX1,MGMT1",
				"20/5.GLB,7-10.SEMI,EX1,MGMT2",
				"20/5.GLB,7-10.REST,EX1,MGMT1",
				"20/5.GLB,7-10.REST,EX1,MGMT2",
				"20/5.SEMI,7-10.GLB,EX1,MGMT1",
				"20/5.SEMI,7-10.GLB,EX1,MGMT2",
				"20/5.SEMI,7-10.GLB,EX2,MGMT1",
				"20/5.SEMI,7-10.GLB,EX2,MGMT2",
				"20/5.SEMI,7-10.GLB,EX3,MGMT1",
				"20/5.SEMI,7-10.GLB,EX3,MGMT2",
				"20/5.SEMI,7-10.SEMI,EX1,MGMT1",
				"20/5.SEMI,7-10.SEMI,EX1,MGMT2",
				"20/5.SEMI,7-10.REST,EX1,MGMT1",
				"20/5.SEMI,7-10.REST,EX1,MGMT2",
				"40/10.SEMI,7-10.GLB,EX1,MGMT1",
				"40/10.SEMI,7-10.GLB,EX1,MGMT2",
				"40/10.SEMI,7-10.GLB,EX2,MGMT1",
				"40/10.SEMI,7-10.GLB,EX2,MGMT2",
				"40/10.SEMI,7-10.GLB,EX3,MGMT1",
				"40/10.SEMI,7-10.GLB,EX3,MGMT2",
				"40/10.SEMI,7-10.SEMI,EX1,MGMT1",
				"40/10.SEMI,7-10.SEMI,EX1,MGMT2",
				"40/10.SEMI,7-10.REST,EX1,MGMT1",
				"40/10.SEMI,7-10.REST,EX1,MGMT2",
				"40/5.GLB,7-10.GLB,EX1,MGMT1",
				"40/5.GLB,7-10.GLB,EX1,MGMT2",
				"40/5.GLB,7-10.GLB,EX2,MGMT1",
				"40/5.GLB,7-10.GLB,EX2,MGMT2",
				"40/5.GLB,7-10.GLB,EX3,MGMT1",
				"40/5.GLB,7-10.GLB,EX3,MGMT2",
				"40/5.GLB,7-10.SEMI,EX1,MGMT1",
				"40/5.GLB,7-10.SEMI,EX1,MGMT2",
				"40/5.GLB,7-10.REST,EX1,MGMT1",
				"40/5.GLB,7-10.REST,EX1,MGMT2",
				"40/5.SEMI,7-10.GLB,EX1,MGMT1",
				"40/5.SEMI,7-10.GLB,EX1,MGMT2",
				"40/5.SEMI,7-10.GLB,EX2,MGMT1",
				"40/5.SEMI,7-10.GLB,EX2,MGMT2",
				"40/5.SEMI,7-10.GLB,EX3,MGMT1",
				"40/5.SEMI,7-10.GLB,EX3,MGMT2",
				"40/5.SEMI,7-10.SEMI,EX1,MGMT1",
				"40/5.SEMI,7-10.SEMI,EX1,MGMT2",
				"40/5.SEMI,7-10.REST,EX1,MGMT1",
				"40/5.SEMI,7-10.REST,EX1,MGMT2",
				"20/10.GLB,11-20.GLB,EX4,MGMT1",
				"20/10.SEMI,11-20.GLB,EX4,MGMT1",
				"20/10.GLB,11-20.SEMI,EX4,MGMT1",
				"20/10.SEMI,11-20.SEMI,EX4,MGMT1"]


	symbs = ('QQQ','SPY','AAPL','IWM') #symbs = ('SPY','VXX','XIV','SPY','AAPL','QQQ','IWM','X','NFLX','AMZN','GLD','GDX','C')
	targetdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Sort_Reports\\Sorts\\' + d.strftime('%Y-%m-%d') + '\\Sorts\\'
	for symb in symbs:
		os.makedirs(targetdir, exist_ok=True)
		targetdirdata = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Sort_Reports\\Sorts\\' + d.strftime('%Y-%m-%d') + '\\Data\\' + symb + '\\'
		os.makedirs(targetdirdata, exist_ok=True)
		sortdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Sort_Reports\\Sort_Data\\' + symb + '\\Summary\\' + d.strftime('%Y-%m-%d') + '\\'
		sortdirs = list(os.listdir(sortdir)) #gives list of each sort's summary report folder
		account = 20000
		for dir in sortdirs: #looks at each folder in summary report folder for each sort folder in list 'sortdirs'
			sorts = list(os.listdir(''.join([sortdir,dir,'\\']))) #gives list of all files in each sort report summary folder
			
			for sor in sorts:
				sortsummary = pd.read_csv(''.join([sortdir,dir,'\\',sor]),'rb',delimiter=',',parse_dates=['Trade_Date'],infer_datetime_format=True).set_index(['Trade_Date'])
				sortsummary.dropna(axis=0,subset=['d2op'],inplace=True)
				data = sortsummary
				datae = pd.DataFrame()
				frm = 0
				for strategy in strategies:
					frm =+ 1			
					if strategy.split(',',3)[3] == 'MGMT2':
						continue
					else:
						s = sor.split('_',3)
						option = s[3]
						srt = s[1]
						
						report, datah = reporter(data=data,strategy=strategy,option=option,account=account)
						datae = pd.concat([datae,datah],axis=1)
						rprtpath = ''.join([targetdir,symb,'_Sort_Report_',srt,'_',d.strftime('%Y-%m-%d'),'.csv'])
						datapath = ''.join([targetdirdata,symb,'_Sort_Report_Data_',srt,'_',option,'_',d.strftime('%Y-%m-%d'),'.csv'])
						report['Form_#'] = ''.join([str(frm),'_',option])
						if os.path.isfile(rprtpath):
							report.to_csv(rprtpath,mode='a',header=None)				
						else: 
							report.to_csv(rprtpath,mode='w',header=report.columns)
				if 'Unnamed: 0' in data.columns:
					data.drop(['Unnamed: 0'], axis=1,inplace=True)
				data = pd.concat([data,datae],axis=1)		
				data.to_csv(datapath,mode='w',header=data.columns)


		


	def option_n_strike(data):
		option = pd.Series((x.split(',',4)[4].split('.',1)[0] for x in data['Strategy_Formula']),index=data.index,name='Option')
		strike = pd.Series((x.split(',',4)[4].split('.',1)[1] for x in data['Strategy_Formula']),index=data.index,name='Strike')
		buy_sell = pd.Series((x.split(',',4)[0].split('.',1)[0] for x in data['Strategy_Formula']),index=data.index,name='Buy/Sell')
		data = pd.concat([data,strike,option,buy_sell],axis=1)
		return data

	
	lcrcolumns = ['Stock_Symbol','Sort','Form_#','Level','Strategy_Formula','#_of_Transactions','#_in_Dataset','D2_Investible_Volume','Calc_Profit%','Win%','Net_Profit/Loss',
					'Highest_Hi','Ratio_Net/Highest_Hi','Hist_Profit/Loss_per_Tx','#_TX>0','%_of_TX>0', '#_OF_"FALSE"_IN_WIN_CALC',
					'Fail%','CALC._PROF/LOSS_ON_Fd_TXS','#_of_Exit_Attempts','%_Successful_Exits','Max_Drawdown','Max_%_Drawdown','%_of_TXs_w/_LOSS>50%',
					'Catastrophic_Fail_%_(-80%)','AMT_AT_RISK','Buy_Target_%','Sell_Target_%','Win_Period_10th','Win_Period_20th','Win_Period_40th','Win_Period_50th','Win_Period_60th']

		
	targetdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Level_Class_Reports\\' +d.strftime('%Y-%m-%d')+ '\\'
	sortsdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Sort_Reports\\Sorts\\' +d.strftime('%Y-%m-%d')+ '\\Sorts\\'
	sortdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Sort_Reports\\Sorts\\' +d.strftime('%Y-%m-%d')+ '\\'
	path = ''.join([targetdir,'Level_Class_Report_',d.strftime('%Y_%m_%d'),'.csv'])
	os.makedirs(targetdir, exist_ok=True)
	sorts = os.listdir(sortsdir)
	lcr = pd.DataFrame(columns=lcrcolumns)
	for sort in sorts:
		lcreport = pd.read_csv(''.join([sortsdir,sort]),'rb',delimiter=',')
		lcreport = lcreport[lcreport['Level']==1]
		s = sort.split('_',4)
		lcreport['Stock_Symbol'] = s[0]
		lcreport['Sort'] = s[3]
		lcr = pd.concat([lcr,lcreport],axis=0)
	lcr = option_n_strike(lcr)
	if 'Unnamed: 0' in lcreport.columns:
		lcreport.drop(['Unnamed: 0'], axis=1,inplace=True)
	lcr = lcr[['Stock_Symbol','Option','Strike','Sort','Form_#','Level','Strategy_Formula','Buy/Sell','#_of_Transactions','#_in_Dataset','D2_Investible_Volume','Calc_Profit%','Win%','Net_Profit/Loss',
				'Highest_Hi','Ratio_Net/Highest_Hi','Hist_Profit/Loss_per_Tx','#_TX>0','%_of_TX>0', '#_OF_"FALSE"_IN_WIN_CALC',
				'Fail%','CALC._PROF/LOSS_ON_Fd_TXS','#_of_Exit_Attempts','%_Successful_Exits','Max_Drawdown','Max_%_Drawdown','%_of_TXs_w/_LOSS>50%',
				'Catastrophic_Fail_%_(-80%)','AMT_AT_RISK','Buy_Target_%','Sell_Target_%','Win_Period_10th','Win_Period_20th','Win_Period_40th','Win_Period_50th','Win_Period_60th']]
	if os.path.isfile(path):
		lcr.to_csv(path,mode='a',header=None)
	else: 
		lcr.to_csv(path,mode='w',header=lcr.columns)
		
	c = c + 1	
	##################################################################Trades & Plays Logger##################################################################################################################
'''
tnpcolumns = [['Trade_#','Log_Date','Trade_Date','Option_Type','Option_Symbol','Expiration','Underlying_Symbol','Strike_Position(stx)',
			'Strategy_Formula','Buy/Sell','Buy_Target_%','Sell_Target_%','D2_Investible_Volume','Strategy_1',
			'Strategy_2','Strategy_3','Strategy_4','Strategy_5','Strategy_6',
			'Strategy_7','Strategy_8','Strategy_9','Strategy_10','Strategy_11',
			'Strategy_12','Strategy_13','Strategy_14','Strategy_15','Strategy_16',
			'Strategy_17','Strategy_18','Strategy_19','Strategy_20']]		
# tnplog index name = 'Transaction_#', 1 based index

def next_monthlies(d): # must test len of option price history to ensure 1: that purchase is possible on d2 and 2: that there is at least 12 days of data
	f = d + dt.timedelta(days=30)
	g = d + dt.timedelta(days=60)
	g = dt.date(g.year, g.month, 15)
	f = dt.date(f.year, f.month, 15)
	g = (g + dt.timedelta(days=(calendar.FRIDAY - g.weekday()) % 7))
	f = (f + dt.timedelta(days=(calendar.FRIDAY - f.weekday()) % 7))
	e = f - dt.timedelta(weeks=2)
	return e,f,g
	
def find_strike(array,value,shift):
	idx = np.abs(array-value).argmin()
	stx = array[idx+shift]	
	return stx
	
def nearest_exp(array,dat,start):
	strt = dt.date(start.year, start.month, start.day)
	array.reset_index(drop=True,inplace=True)
	idx = np.abs(array-dat).argmin()
	exp = aray[idx]
	return exp
	

def TnPLogger(data,d):	
	tnplogger = pd.DataFrame(columns = tnpcolumns)		
	stocks = data['Stock_Symbol'].unique()
	i = -1
	for symb in stocks:
		#stk = web.DataReader(symb, 'yahoo', start, d)
		#center = stk.ix[d]['open']
		trades = data[data['Stock_Symbol']==symb]
		calls = trades[trades['Option']=='call']
		puts = trades[trades['Option']=='put']
		cstx = calls['Strike'].unique()
		pstx = puts['Strike'].unique()		
		if len(cstx) > 0:
			for x in cstx:	
				optc = calls[calls['Strike']==x]				
				buy_sells = optc['Buy/Sell'].unique()
				for bs in buy_sells:
					i = i + 1
					#min_exp,exp,max_exp = next_monthlies(d)
					#opt = option_finder(symb=symb,center=center,t='c',min_exp=min_exp,exp=exp,max_exp=max_exp,m=x)
					tnplogger.at[i,'Strategy_Formula'] = optc.ix[optc['Hist_Profit/Loss_per_Tx'].idxmax()]['Strategy_Formula']
					tnplogger.at[i,'D2_Investible_Volume'] = optc['D2_Investible_Volume'].mean()
					tnplogger.at[i,'Buy/Sell'] = bs
					tnplogger.at[i,'Trade_Date'] =	d
					tnplogger.at[i,'Option_Type'] = 'Call'
					tnplogger.at[i,'Strike_Position(stx)'] = x
					tnplogger.at[i,'Underlying_Symbol'] = symb
					optc.sort_values(by='Win%',ascending=True,axis=0,inplace=True)
					strtgs = optc['Strategy_Formula'].unique()
					strtgs = strtgs[:20]
					#tnplogger['Suggested_Option_Symbol'] = opt
					#tnplogger['Expiration'] = opt.split(',',3)[0]
					z = -1
					for s in strtgs:
						z = z + 1				
						col = ''.join(['Strategy_',str(z+1)])
						tnplogger.at[i,col] = s
					
		else: 
			pass
		if len(pstx) > 0:
			for x in pstx:
				optp = puts[puts['Strike']==x]				
				buy_sells = optp['Buy/Sell'].unique()
				for bs in buy_sells:
					i = i + 1								
					#min_exp,exp,max_exp = next_monthlies(d)
					#opt = option_finder(symb=symb,center=center,t='p',min_exp=min_exp,exp=exp,max_exp=max_exp,m=x)
					tnplogger.at[i,'Strategy_Formula'] = optp.ix[optp['Hist_Profit/Loss_per_Tx'].idxmax()]['Strategy_Formula']
					tnplogger.at[i,'D2_Investible_Volume'] = optp['D2_Investible_Volume'].mean()
					tnplogger.at[i,'Buy/Sell'] = bs
					tnplogger.at[i,'Trade_Date'] =	d
					tnplogger.at[i,'Option_Type'] = 'Put'
					tnplogger.at[i,'Strike_Position(stx)'] = x
					tnplogger.at[i,'Underlying_Symbol'] = symb
					optp.sort_values(by='Win%',ascending=True,axis=0,inplace=True)
					strtgs = optp['Strategy_Formula'].unique()
					strtgs = strtgs[:20]
					#tnplogger['Option_Symbol'] = opt
					#tnplogger['Expiration'] = opt.split(',',3)[0]
					z = -1
					for s in strtgs:
						z = z + 1				
						col = ''.join(['Strategy_',str(z+1)])
						tnplogger.at[i,col] = s
		else: 
			pass
	tnplogger['Trade_#'] = tnplogger.index + 1
	tnplogger['Log_Date'] = dt.date.today()
	return tnplogger
	


runlogcolumns = ['Run_Dates','LCR_Dates']
runlogpath = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Logs\\TnPRunLog.csv'
tnplogpath = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Logs\\Trades_&_Plays_Log.csv'
lcrdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Level_Class_Reports\\' #+d.strftime('%Y-%m-%d')+ '\\Level_Class_Report_' +d.strftime('%Y-%m-%d') + '.csv'
tempdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Templates\\'

if os.path.isfile(runlogpath):
	runlog = pd.read_csv(runlogpath, 'rb', delimiter=',',parse_dates=['Run_Dates'],infer_datetime_format=True)
	tnplog = pd.read_csv(tnplogpath,'rb',delimiter=',',parse_dates=['Log_Date'],infer_datetime_format=True).sort(columns='Log_Date',ascending=False,axis=0)
	last_run = runlog.iloc[-1]['Run_Dates'].date()
	lcrs = os.listdir(lcrdir)
	remaining = pd.to_datetime([i for i in lcrs if last_run < dt.datetime.strptime(i, '%Y-%m-%d').date()],infer_datetime_format=True)
	tx=1
else:
	lcrs = os.listdir(lcrdir)
	remaining = [dt.datetime.strptime(i, '%Y-%m-%d').date() for i in lcrs]
	runlog = pd.DataFrame(columns = runlogcolumns)
	tnplog = pd.DataFrame(columns = tnpcolumns)
	tx = 0
	
for d in remaining:
	lcrpath = ''.join([lcrdir,d.strftime('%Y-%m-%d'),'\\Level_Class_Report_',d.strftime('%Y_%m_%d'),'.csv'])	
	lcr = pd.read_csv(lcrpath,'rb',delimiter=',')
	log = TnPLogger(lcr,d)
	if not tx == 0:		
		log['Trade_#'] = log['Trade_#'] + tnplog.iloc[-1]['Trade_#']
	tnplog = pd.concat([tnplog,log],axis=0)
	tx = 1
	#tnplog.sort(columns='Log_Date', axis=0, ascending=True, inplace=True) 
	#tnplog.reset_index(drop=True,inplace=True)
tnplog.to_csv(tnplogpath,mode='w',delimiter=',',index=False)

daysrunlog = pd.DataFrame(data={'Run_Dates' : dt.date.today(),'LCR_Dates' : remaining}, columns = runlogcolumns)
runlog = pd.concat([runlog,daysrunlog],axis=0)
runlog.to_csv(runlogpath, mode='w',index=False,header=runlog.columns)
		





	#############################################################################################################################################

def next_monthlies(d): # must test len of option price history to ensure 1: that purchase is possible on d2 and 2: that there is at least 12 days of data
	f = d + dt.timedelta(days=30)
	g = d + dt.timedelta(days=60)
	g = dt.date(g.year, g.month, 15)
	f = dt.date(f.year, f.month, 15)
	g = (g + dt.timedelta(days=(calendar.FRIDAY - g.weekday()) % 7))
	f = (f + dt.timedelta(days=(calendar.FRIDAY - f.weekday()) % 7))
	e = f - dt.timedelta(weeks=2)
	return e,f,g
	
def find_strike(array,value,shift):
	idx = np.abs(array-value).argmin()
	stx = array[idx+shift]	
	return stx
	
def nearest_exp(array,dat,start):
	strt = dt.date(start.year, start.month, start.day)
	array.reset_index(drop=True,inplace=True)
	idx = np.abs(array-dat).argmin()
	exp = array[idx]
	return exp
	
def option_finder(opt,symb,strike,start,opt_type,min_exp,exp,max_exp,m): # open opt_key outside of func in begining of loop and pass df as argument
	try:
		opt = (opt[opt['expiration'] <= max_exp])
		opt = (opt[opt['expiration'] >= min_exp])
		opt = (opt[opt['quote_date'] >= start])
		
		stx = find_strike(opt['strike'],strike,m)
		opt = (opt[opt['strike'] == stx])
		opt.reset_index(drop=False, inplace=True)
		
		if len(opt['expiration'].unique()) > 1:		
			x = nearest_exp(opt['expiration'],exp,start)
			mask = opt['expiration'] == x
			opt = opt[opt['expiration'] == x]
		duples = opt['quote_date'].duplicated()
		if duples.isin([True]).values.any():
			opt = opt[duples == False]
		
	
		option = ''.join([str(opt.loc[opt.index[0]]['expiration'].date()),',',opt_type,',',str(stx),',',symb])
		opt = opt[['underlying_symbol', 'quote_date','root', 'expiration', 'strike', 'option_type',
			 'open', 'high', 'low', 'close', 'trade_volume', 'bid_size_1545',
			 'bid_1545', 'ask_size_1545', 'ask_1545', 'underlying_bid_1545',
			 'underlying_ask_1545', 'implied_underlying_price_1545',
			 'active_underlying_price_1545', 'implied_volatility_1545', 'delta_1545',
			 'gamma_1545', 'theta_1545', 'vega_1545', 'rho_1545', 'bid_size_eod',
			 'bid_eod', 'ask_size_eod', 'ask_eod', 'underlying_bid_eod',
			 'underlying_ask_eod', 'vwap', 'open_interest', 'delivery_code']]
	except: 
		opt = 'NA'
		option = 'NA'
	return opt, option
	
current_time = dt.datetime.now()	
last_friday = (current_time.date()
	- dt.timedelta(days=current_time.weekday())
	+ dt.timedelta(days=4))

logdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Logs\\Trades_&_Plays_Log.csv'
tnplog = pd.read_csv(logdir, 'rb', delimiter=',',parse_dates=['Trade_Date'],infer_datetime_format=True).set_index(['Trade_#'])

#tnplog = tnplog.replace(' ',np.nan, regex=True)
to_get_option_symbols = tnplog[tnplog['Option_Symbol'].isnull()]
tnplog['Option_Symbol'] = tnplog['Option_Symbol'].astype('str')
tnplog['Expiration'] = tnplog['Expiration'].astype('str')
for i in to_get_option_symbols.index:
	dat = tnplog.loc[i]['Trade_Date'] #datetime.strptime(tnplog.loc[x]['Trade_Date'], '%m/%d/%Y')
	if (dat.date() == last_friday) & (dt.date.today().weekday() >= 5) | (dat.date() == dt.date.today()):
		continue
		#pass
	symb = tnplog.loc[i]['Underlying_Symbol']
	dir = 'C:\\Users\\asus\\Documents\\Quant\\Database\\' + symb + '\\Options\\'
	targetpath = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Fore-Tester\\Option_Data\\' + symb + '\\'
	os.makedirs(targetpath, exist_ok=True)	
	m = tnplog.loc[i]['Strike_Position(stx)']
	dirstk = 'C:\\Users\\asus\\Documents\\Quant\\Database\\' + symb + '\\Stock\\' + symb + '.csv'
	stk = pd.read_csv(dirstk,'r',',',parse_dates=['Date'],infer_datetime_format=True).set_index(['Date'])
	y = pd.Index(stk.index).get_loc(dat)
	d = stk.index[y+1]
	opt_type = tnplog.loc[i]['Option_Type']
	min_exp, exp, max_exp = next_monthlies(d=dat)
	strike = np.round(stk.loc[d][0],decimals=0)
	diropt = ''.join([dir,symb,'_',str(exp.year),'_',opt_type,'s.csv'])
	try: 
		optdata = pd.read_csv(diropt,'rb',delimiter=',',parse_dates=['expiration','quote_date'],infer_datetime_format=True).sort_index(axis=0)						
	except:
		optdata = 'NA'		
	opt,option_symbol = option_finder(opt=optdata,symb=symb,strike=strike,start=dat,opt_type=opt_type,min_exp=min_exp,exp=exp,max_exp=max_exp,m=m)
	if len(option_symbol) > 5:	
		tnplog.at[i,'Option_Symbol'] = option_symbol
		tnplog.at[i,'Expiration'] =  option_symbol.split(',',1)[0]
		tnplog.at[i,'Log_Date'] = dt.date.today()
		optpath = ''.join([targetpath,option_symbol,'.csv'])
		opt.to_csv(optpath,mode='w',header=opt.columns)
	else:
		continue
tnplog.to_csv(logdir,mode='w',header=tnplog.columns)
	
'''
	
  
import pandas as pd
import numpy as np
import os
from datetime import datetime
import datetime as dt
import calendar



def next_monthlies(d): # must test len of option price history to ensure 1: that purchase is possible on d2 and 2: that there is at least 12 days of data
	f = d + dt.timedelta(days=30)
	g = d + dt.timedelta(days=60)
	g = dt.date(g.year, g.month, 15)
	f = dt.date(f.year, f.month, 15)
	g = (g + dt.timedelta(days=(calendar.FRIDAY - g.weekday()) % 7))
	f = (f + dt.timedelta(days=(calendar.FRIDAY - f.weekday()) % 7))
	e = f - dt.timedelta(weeks=2)
	return e,f,g
	
def find_strike(array,value,shift):
	idx = np.abs(array-value).argmin()
	stx = array[idx+shift]	
	return stx
	
def nearest_exp(array,dat,start):
	strt = dt.date(start.year, start.month, start.day)
	array.reset_index(drop=True,inplace=True)
	idx = np.abs(array-dat).argmin()
	exp = array[idx]
	return exp
	
def option_finder(opt,symb,strike,start,opt_type,min_exp,exp,max_exp,m): # open opt_key outside of func in begining of loop and pass df as argument
	try:
		opt = (opt[opt['expiration'] <= max_exp])
		opt = (opt[opt['expiration'] >= min_exp])
		opt = (opt[opt['quote_date'] >= start])
		
		stx = find_strike(opt['strike'],strike,m)
		opt = (opt[opt['strike'] == stx])
		opt.reset_index(drop=False, inplace=True)
		
		if len(opt['expiration'].unique()) > 1:		
			x = nearest_exp(opt['expiration'],exp,start)
			mask = opt['expiration'] == x
			opt = opt[opt['expiration'] == x]
		duples = opt['quote_date'].duplicated()
		if duples.isin([True]).values.any():
			opt = opt[duples == False]
		
	
		option = ''.join([str(opt.loc[opt.index[0]]['expiration'].date()),',',opt_type,',',str(stx),',',symb])
		opt = opt[['underlying_symbol', 'quote_date','root', 'expiration', 'strike', 'option_type',
			 'open', 'high', 'low', 'close', 'trade_volume', 'bid_size_1545',
			 'bid_1545', 'ask_size_1545', 'ask_1545', 'underlying_bid_1545',
			 'underlying_ask_1545', 'implied_underlying_price_1545',
			 'active_underlying_price_1545', 'implied_volatility_1545', 'delta_1545',
			 'gamma_1545', 'theta_1545', 'vega_1545', 'rho_1545', 'bid_size_eod',
			 'bid_eod', 'ask_size_eod', 'ask_eod', 'underlying_bid_eod',
			 'underlying_ask_eod', 'vwap', 'open_interest', 'delivery_code']]
	except: 
		opt = 'NA'
		option = 'NA'
	return opt, option
	
current_time = dt.datetime.now()	
last_friday = (current_time.date()
    - dt.timedelta(days=current_time.weekday())
    + dt.timedelta(days=4, weeks=-1))

logdir = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Logs\\Trades_&_Plays_Log.csv'
tnplog = pd.read_csv(logdir, 'rb', delimiter=',',parse_dates=['Trade_Date'],infer_datetime_format=True).set_index(['Trade_#'])

#tnplog = tnplog.replace(' ',np.nan, regex=True)
to_get_option_symbols = tnplog[tnplog['Option_Symbol'].isnull()]
tnplog['Option_Symbol'] = tnplog['Option_Symbol'].astype('str')
tnplog['Expiration'] = tnplog['Expiration'].astype('str')
for i in to_get_option_symbols.index:
	dat = tnplog.loc[i]['Trade_Date'] #datetime.strptime(tnplog.loc[x]['Trade_Date'], '%m/%d/%Y')
	if (dat.date() == last_friday) & (dt.date.today().weekday() >= 5) | (dat.date() == (dt.date.today() + dt.timedelta(days=1))):
		continue
		#pass
	symb = tnplog.loc[i]['Underlying_Symbol']
	dir = 'C:\\Users\\asus\\Documents\\Quant\\Database\\' + symb + '\\Options\\'
	targetpath = 'C:\\Users\\asus\\Dropbox\\Outlines\\MTAUTO-PYTHON\\Option_Data\\' + symb + '\\'
	os.makedirs(targetpath, exist_ok=True)	
	m = tnplog.loc[i]['Strike_Position(stx)']
	dirstk = 'C:\\Users\\asus\\Documents\\Quant\\Database\\' + symb + '\\Stock\\' + symb + '.csv'
	stk = pd.read_csv(dirstk,'r',',',parse_dates=['Date'],infer_datetime_format=True).set_index(['Date'])
	y = pd.Index(stk.index).get_loc(dat)
	d = stk.index[y+1]
	opt_type = tnplog.loc[i]['Option_Type']
	min_exp, exp, max_exp = next_monthlies(d=dat)
	strike = np.round(stk.loc[d][0],decimals=0)
	diropt = ''.join([dir,symb,'_',str(exp.year),'_',opt_type,'s.csv'])
	try: 
		optdata = pd.read_csv(diropt,'rb',delimiter=',',parse_dates=['expiration','quote_date'],infer_datetime_format=True).sort_index(axis=0)						
	except:
		optdata = 'NA'		
	opt,option_symbol = option_finder(opt=optdata,symb=symb,strike=strike,start=dat,opt_type=opt_type,min_exp=min_exp,exp=exp,max_exp=max_exp,m=m)
	if len(option_symbol) > 5:	
		tnplog.at[i,'Option_Symbol'] = option_symbol
		tnplog.at[i,'Expiration'] =  option_symbol.split(',',1)[0]
		tnplog.at[i,'Log_Date'] = dt.date.today()
		optpath = ''.join([targetpath,option_symbol,'.csv'])
		opt.to_csv(optpath,mode='w',header=opt.columns)
	else:
		continue
tnplog.to_csv(logdir,mode='w',header=tnplog.columns)
	
	
	

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				






